/* Generated By:JJTree: Do not edit this line. ASTinterface_inheritance_spec.cs */

using System;
using System.Collections;

namespace parser {

public class ASTinterface_inheritance_spec : SimpleNode {
  public ASTinterface_inheritance_spec(int id) : base(id) {
  }

  public ASTinterface_inheritance_spec(IDLParser p, int id) : base(p, id) {
  }

  /// <summary>
  /// calculates the scope names of all the scopes represented by the inherited interfaces.
  /// </summary>
  /// <remarks>this method is used by IDLParser.</remarks>
  /// <returns>a list of scoped names IList /* <ASTscoped_name> */ </returns>
  public IList getInheritedScopeNames() {
      IList result = new ArrayList();
      for (int i = 0; i < jjtGetNumChildren(); i++) {
          ASTinterface_name ifName = (ASTinterface_name) jjtGetChild(i);
          ASTscoped_name scopedName = (ASTscoped_name) ifName.jjtGetChild(0);
          result.Add(scopedName);
      }      
      return result;
  }


  /** Accept the visitor. **/
  public override Object jjtAccept(IDLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}


}

