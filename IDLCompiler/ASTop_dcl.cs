/* Generated By:JJTree: Do not edit this line. ASTop_dcl.cs */

/* ASTop_dcl.cs
 * 
 * Project: IIOP.NET
 * IDLToCLSCompiler
 * 
 * WHEN      RESPONSIBLE
 * 14.02.03  Dominic Ullmann (DUL), dominic.ullmann -at- elca.ch
 *  
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

using System;
using Ch.Elca.Iiop.IdlCompiler.Exceptions;

namespace parser {

public class ASTop_dcl : SimpleNodeWithIdent {

    #region Constants

    public const int OP_Attr_NONE = 0;
    public const int OP_Attr_ONEWAY = 1;

    #endregion Constants
    #region IFields

    private int m_opAttr = OP_Attr_NONE;

    #endregion IFields
    #region IConstructors

    public ASTop_dcl(int id) : base(id) {
    }

    public ASTop_dcl(IDLParser p, int id) : base(p, id) {
    }

    #endregion IConstructors
    #region IMethods

    /** Accept the visitor. **/
  public override Object jjtAccept(IDLParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void setOpAttr(int opAttr) {
        if ((opAttr < OP_Attr_NONE) || (opAttr > OP_Attr_ONEWAY)) { 
            throw new InternalCompilerException("invalid opAttr: " + opAttr); 
        }
        m_opAttr = opAttr;
    }

    public int getOpAttr() {
        return m_opAttr;
    }
    
    public bool IsOneWay() {
        return getOpAttr() == OP_Attr_ONEWAY;
    }
    
    public override string GetIdentification() {
        return "method " + getIdent() + " defined in " + 
                   ((SimpleNode)jjtGetParent()).GetEmbedderDesc();
    }
    
    #endregion IMethods
    
}
}
