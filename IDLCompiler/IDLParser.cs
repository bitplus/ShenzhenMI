/* Generated By:JJTree&JavaCC: Do not edit this line. IDLParser.cs */

using System;

namespace parser {

using symboltable;
using System.Collections;
using System.Globalization;

public class IDLParser{/*@bgen(jjtree)*/
  protected JJTIDLParserState jjtree = new JJTIDLParserState();
    /** the symbol table */
    private SymbolTable m_symbolTable = new SymbolTable();

    public SymbolTable getSymbolTable() {
        return m_symbolTable;
    }


    // used for interface qualifier parsing: no modifier
    private const int IS_DEFAULT_IF = 0;
    // used for interface qualifier parsing: abstract modifier
    private const int IS_ABSTRACT_IF = 1;
    // used for interface qualifier parsing: local modifier
    private const int IS_LOCAL_IF = 2;

    // stores the last #pragma prefix value found
    private String m_lastPrefix = "";

    // stores reference to the module node inserted for a pragma prefix (if any)
    private ASTmodule m_modForPrefix = null;
    // stores reference to definition for the module node inserted for a pragma prefix (if any)
    private ASTdefinition m_defForPrefix = null;


    // from The Common Object Request Broker: Architecture and Specification, v2.3 (98-12-01.pdf)
    //
    // Table 3-5 The Formatting Characters
    // Description       Abbreviation     ISO 646 Octal Value
    // alert             BEL              007
    // backspace         BS               010
    // horizontal tab    HT               011
    // newline           NL, LF           012
    // vertical tab      VT               013
    // form feed         FF               014
    // carriage return   CR               015
    //
    // Table 3-9 Escape Sequences
    // Description           Escape Sequence
    // newline               \n
    // horizontal tab        \t
    // vertical tab          \v
    // backspace             \b
    // carriage return       \r
    // form feed             \f
    // alert                 \a
    // backslash             \\
    // question mark         \?
    // single quote          \'
    // double quote          \"
    // octal number          \ooo
    // hexadecimal number    \xhh
    // unicode character     \\uhhhh                    - handled in ParseWideCharLiteral
    //
    private Char ParseCharLiteral(String charLiteral) {
        if (!charLiteral.StartsWith("\\"))
            return charLiteral[0];

        if (charLiteral == "\\n")
            return '\n';

        if (charLiteral == "\\t")
            return '\t';

        if (charLiteral == "\\v")
            return Convert.ToChar(11);                            // JavaCCCS doesn't know '\v' and '\xHH' notations

        if (charLiteral == "\\b")
            return '\b';

        if (charLiteral == "\\r")
            return '\r';

        if (charLiteral == "\\f")
            return '\f';

        if (charLiteral == "\\a")
            return Convert.ToChar(7);                            // JavaCCCS doesn't know '\v' and '\xHH' notations

        if (charLiteral == "\\\\")
            return '\\';

        if (charLiteral == "\\?")
            return '?';

        if (charLiteral == "\\'")
            return '\'';

        if (charLiteral == "\\\"")
            return '\"';

        if (charLiteral.StartsWith("\\x") && (charLiteral.Length > 2 && charLiteral.Length < 5)) {
            Int32 charValHex = Int32.Parse(charLiteral.Substring(2), NumberStyles.AllowHexSpecifier);
            return Convert.ToChar(charValHex);
        }

        if (charLiteral.Equals("\\0"))                            // non-standard literal
            return Convert.ToChar(0);

        if (charLiteral.Length > 1 && charLiteral.Length < 5) {
            Int32 charValDec = Convert.ToInt32(charLiteral.Substring(1), 8);
            return Convert.ToChar(charValDec);
        }

        throw new NotSupportedException("unsupported escape in character literal: " + charLiteral);
    }

    private Char ParseWideCharLiteral(String wideCharLiteral) {
        if (!wideCharLiteral.StartsWith("\\u")) {
            return ParseCharLiteral(wideCharLiteral);
        } else {
            Int32 charVal = Int32.Parse(wideCharLiteral.Substring(2), NumberStyles.AllowHexSpecifier);
            return Convert.ToChar(charVal);
        }
    }

  public String repIdVal() {
  Token repIdValToken; String result;
    switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
    case IDLParserConstants.STRING:
      repIdValToken = jj_consume_token(IDLParserConstants.STRING);
                               result = repIdValToken.image;
                               // remove "" around the literal
                               {if (true) return result.Substring(1, result.Length - 2);}
      break;
    case IDLParserConstants.REPIDVAL_STRING:
      repIdValToken = jj_consume_token(IDLParserConstants.REPIDVAL_STRING);
                               result = repIdValToken.image;
                               // remove "" around the literal
                               {if (true) return result.Substring(1, result.Length - 2);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
      break;
    }
    throw new Error("Missing return statement in function");
  }

/* handling of pragma id outside of a type definition */
  public void pragmaID() {
  String ident = ""; String val = "";
    jj_consume_token(IDLParserConstants.PRAGMA);
    jj_consume_token(IDLParserConstants.PRAGMAID);
    ident = identifier();
    val = repIdVal();
        Scope currentScope = m_symbolTable.getCurrentScope();
        if (!m_lastPrefix.Equals("")) {
            // prepend prefix
            val = val.Insert(val.IndexOf(":") + 1, m_lastPrefix + "/");
        }

        currentScope.addPragmaID(ident, val); // add pragma ID

  }

/* handling of pragma id inside a type definition */
  public void pragmaIDInside() {
  String ident = ""; String val = "";
    jj_consume_token(IDLParserConstants.PRAGMA);
    jj_consume_token(IDLParserConstants.PRAGMAID);
    ident = identifier();
    val = repIdVal();
        Scope currentScope = m_symbolTable.getCurrentScope();

        if (!m_lastPrefix.Equals("")) {
            // prepend prefix
            val = val.Insert(val.IndexOf(":") + 1, m_lastPrefix + "/");
        }

        currentScope.addPragmaID(ident, val); // add pragma ID

  }

/* handling of pragma prefix */
  public void pragmaPrefix() {
  String val = "";
    jj_consume_token(IDLParserConstants.PRAGMA);
    jj_consume_token(IDLParserConstants.PRAGMAPREFIX);
    val = string_literal();
        val = val.Trim();
        if (m_lastPrefix.Equals(val)) { {if (true) return;} } // same pragma prefix, nothing to do

        if ( (!(val.Equals(""))) && (m_symbolTable.getCurrentScope() != m_symbolTable.getTopScope())) {
            {if (true) throw new ParseException("invalid scope for using a #pragma prefix, only usable outside of module declarations");}
        }

        if (m_symbolTable.isPragmaScopeOpen()) {
            // close the scopes up to the pragma-scope (incl. pragma scope)
            m_symbolTable.closePragmaScope();
            // close module node for pragma
            jjtree.closeNodeScope(m_modForPrefix, true);
            jjtree.closeNodeScope(m_defForPrefix, true);
            m_modForPrefix = null;
            m_defForPrefix = null;
            // open scopes for new pragma, if val != ""
            m_symbolTable.openPragmaScope(val);
        } else {
            m_symbolTable.openPragmaScope(val);
        }
        // open a defintion and an included module node into the parse tree if val != "" --> insert a module opening for pragma prefix
        if (!(val.Equals(""))) {
            m_defForPrefix = new ASTdefinition(this, IDLParserTreeConstants.JJTDEFINITION);
            jjtree.openNodeScope(m_defForPrefix);
            m_modForPrefix = new ASTmodule(this, IDLParserTreeConstants.JJTMODULE);
            jjtree.openNodeScope(m_modForPrefix);
            m_modForPrefix.setIdent(val);
        }
        m_lastPrefix = val;
  }

/* Production 1, chapter 3.4 in CORBA 2.3.1 spec, pragma prefix handling added here */
  public ASTspecification specification() {
 /*@bgen(jjtree) specification */
  ASTspecification jjtn000 = new ASTspecification(this, IDLParserTreeConstants.JJTSPECIFICATION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 13:
      case 16:
      case 17:
      case 18:
      case 22:
      case 23:
      case 32:
      case 48:
      case 49:
      case 61:
      case 62:
      case 66:
      case 76:
      case IDLParserConstants.PRAGMA:
        while (true) {
          if (jj_2_1(2)) {
            definition();
          } else if (jj_2_2(2)) {
            pragmaPrefix();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
          case 13:
          case 16:
          case 17:
          case 18:
          case 22:
          case 23:
          case 32:
          case 48:
          case 49:
          case 61:
          case 62:
          case 66:
          case 76:
          case IDLParserConstants.PRAGMA:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            goto label_1;
            break;
          }
        }
        label_1: ;
        
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (m_modForPrefix != null) {
        jjtree.closeNodeScope(m_modForPrefix, true); // close inserted module node scope for prefix, if one is open after parse completition
        jjtree.closeNodeScope(m_defForPrefix, true); // close inserted definition node scope for prefix
    }
    {if (true) return jjtn000;}
        break;
      case 0:
        jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return jjtn000;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
{if (true) throw ;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

/* Production 2, chapter 3.4 CORBA 2.3.1, added pragma id and prefix parsing, moved semicolon after value to production 14-17 */
  public void definition() {
 /*@bgen(jjtree) definition */
  ASTdefinition jjtn000 = new ASTdefinition(this, IDLParserTreeConstants.JJTDEFINITION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 48:
      case 49:
      case 61:
      case 62:
      case 66:
        type_dcl();
        jj_consume_token(12);
        break;
      case 32:
        const_dcl();
        jj_consume_token(12);
        break;
      case 76:
        except_dcl();
        jj_consume_token(12);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_3(2)) {
          interfacex();
          jj_consume_token(12);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
          case 13:
            module();
            jj_consume_token(12);
            break;
          default:
            jj_la1[4] = jj_gen;
            if (jj_2_4(2)) {
              value();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
              case IDLParserConstants.PRAGMA:
                pragmaID();
                break;
              default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
                break;
              }
            }
            break;
          }
        }
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 3, chapter 3.4 in CORBA 2.3.1 spec */
  public void module() {
 /*@bgen(jjtree) module */
  ASTmodule jjtn000 = new ASTmodule(this, IDLParserTreeConstants.JJTMODULE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(13);
      ident = identifier();
                                  m_symbolTable.openScope(ident, false);
      jj_consume_token(14);
      while (true) {
        definition();
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 13:
        case 16:
        case 17:
        case 18:
        case 22:
        case 23:
        case 32:
        case 48:
        case 49:
        case 61:
        case 62:
        case 66:
        case 76:
        case IDLParserConstants.PRAGMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          goto label_2;
          break;
        }
      }
      label_2: ;
      
      jj_consume_token(15);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setIdent(ident);
    // close scope for this module after parsing
    m_symbolTable.closeScope();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 4: chapter 3.4, CORBA 2.3.1. spec (renamed interface -> interfacex, because interface is a keyword in java) */
  public void interfacex() {
 /*@bgen(jjtree) interfacex */
  ASTinterfacex jjtn000 = new ASTinterfacex(this, IDLParserTreeConstants.JJTINTERFACEX);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(4)) {
        interface_dcl();
      } else if (jj_2_6(4)) {
        forward_dcl();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 5: chapter 3.4, CORBA 2.3.1. spec */
  public void interface_dcl() {
 /*@bgen(jjtree) interface_dcl */
  ASTinterface_dcl jjtn000 = new ASTinterface_dcl(this, IDLParserTreeConstants.JJTINTERFACE_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      interface_header();
    // add the interface symbol, after the header is completed
    // get the header node
    ASTinterface_header header = (ASTinterface_header) jjtree.peekNode();
    Scope currentScope = m_symbolTable.getCurrentScope();
    currentScope.addSymbol(header.getIdent());
    Scope ifScope = m_symbolTable.openScope(header.getIdent(), true); // open a scope for type declaration inside the interface
    IList inheritedScopes = header.getInheritedScopeNames(); // list of ASTscoped_name nodes
    for (int i = 0; i <inheritedScopes.Count; i++) {
        ASTscoped_name inheritedScope = (ASTscoped_name)inheritedScopes[i];
        Scope inheritedResolved =
            m_symbolTable.ResolveScopedNameToScope((inheritedScope.hasFileScope() ? m_symbolTable.getTopScope() : currentScope),
                                                   inheritedScope.getNameParts());
        if (inheritedResolved != null) {
            ifScope.AddInheritedScope(inheritedResolved);
        }
    }
      jj_consume_token(14);
      interface_body();
      jj_consume_token(15);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        m_symbolTable.closeScope(); // close the scope for type declarations inside the interface

    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 6: chapter 3.4, CORBA 2.3.1. spec; updated for local interfaces */
  public void forward_dcl() {
 /*@bgen(jjtree) forward_dcl */
  ASTforward_dcl jjtn000 = new ASTforward_dcl(this, IDLParserTreeConstants.JJTFORWARD_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
  System.Int32 ifType = IS_DEFAULT_IF;
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 17:
      case 18:
        ifType = interface_qualifier();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
        break;
      }
      jj_consume_token(16);
      ident = identifier();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setIdent(ident);
    if (ifType == IS_ABSTRACT_IF) {
       jjtn000.setAbstract();
    }
    if (ifType == IS_LOCAL_IF) {
       jjtn000.setLocal();
    }
    Scope currentScope = m_symbolTable.getCurrentScope();
    currentScope.addFwdDecl(ident);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 7: chapter 3.4, CORBA 2.3.1. spec; updated for local interfaces */
  public void interface_header() {
 /*@bgen(jjtree) interface_header */
  ASTinterface_header jjtn000 = new ASTinterface_header(this, IDLParserTreeConstants.JJTINTERFACE_HEADER);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
  System.Int32 ifType = IS_DEFAULT_IF;
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 17:
      case 18:
        ifType = interface_qualifier();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
        break;
      }
      jj_consume_token(16);
      ident = identifier();
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 19:
        interface_inheritance_spec();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
        break;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setIdent(ident);
    if (ifType == IS_ABSTRACT_IF) {
       jjtn000.setAbstract();
    }
    if (ifType == IS_LOCAL_IF) {
       jjtn000.setLocal();
    }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* interface qualifiers: local / abstract */
  public System.Int32 interface_qualifier() {
    switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
    case 17:
      jj_consume_token(17);
                 {if (true) return 1;}
      break;
    case 18:
      jj_consume_token(18);
               {if (true) return 2;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
      break;
    }
    throw new Error("Missing return statement in function");
  }

/* Production 8: chapter 3.4, CORBA 2.3.1 */
  public void interface_body() {
 /*@bgen(jjtree) interface_body */
  ASTinterface_body jjtn000 = new ASTinterface_body(this, IDLParserTreeConstants.JJTINTERFACE_BODY);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 21:
        case 32:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 66:
        case 70:
        case 71:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 84:
        case IDLParserConstants.PRAGMA:
        case IDLParserConstants.ID:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          goto label_3;
          break;
        }
        export();
      }
      label_3: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 9: chater 3.4 CORBA 2.3.1, added pragma id inside */
  public void export() {
 /*@bgen(jjtree) export */
  ASTexport jjtn000 = new ASTexport(this, IDLParserTreeConstants.JJTEXPORT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 48:
      case 49:
      case 61:
      case 62:
      case 66:
        type_dcl();
        jj_consume_token(12);
        break;
      case 32:
        const_dcl();
        jj_consume_token(12);
        break;
      case 76:
        except_dcl();
        jj_consume_token(12);
        break;
      case 74:
      case 75:
        attr_dcl();
        jj_consume_token(12);
        break;
      case 21:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 70:
      case 71:
      case 77:
      case 78:
      case 84:
      case IDLParserConstants.ID:
        op_dcl();
        jj_consume_token(12);
        break;
      case IDLParserConstants.PRAGMA:
        pragmaIDInside();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 10: chapter 3.4 CORBA 2.3.1 */
  public void interface_inheritance_spec() {
 /*@bgen(jjtree) interface_inheritance_spec */
  ASTinterface_inheritance_spec jjtn000 = new ASTinterface_inheritance_spec(this, IDLParserTreeConstants.JJTINTERFACE_INHERITANCE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(19);
      interface_name();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          goto label_4;
          break;
        }
        jj_consume_token(20);
        interface_name();
      }
      label_4: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 11: chapter 3.4, CORBA 2.3.1 */
  public void interface_name() {
 /*@bgen(jjtree) interface_name */
  ASTinterface_name jjtn000 = new ASTinterface_name(this, IDLParserTreeConstants.JJTINTERFACE_NAME);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      scoped_name();
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 12: chapter 3.4, CORBA 2.3.1 */
  public void scoped_name() {
 /*@bgen(jjtree) scoped_name */
  ASTscoped_name jjtn000 = new ASTscoped_name(this, IDLParserTreeConstants.JJTSCOPED_NAME);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String part = "";
  String fullScopedName = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 21:
        jj_consume_token(21);
             fullScopedName = "::"; jjtn000.setHasFileScope(true);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
        break;
      }
      part = identifier();
                                                                                              fullScopedName += part; jjtn000.addNamePart(part);
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 21:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          goto label_5;
          break;
        }
        jj_consume_token(21);
        part = identifier();
                                                                                                                                                                                fullScopedName += ("::" + part); jjtn000.addNamePart(part);
      }
      label_5: ;
      
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setScopedName(fullScopedName);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 13: TBD: check if correct */
  public void value() {
 /*@bgen(jjtree) value */
  ASTvalue jjtn000 = new ASTvalue(this, IDLParserTreeConstants.JJTVALUE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(4)) {
        value_decl();
      } else if (jj_2_8(4)) {
        value_abs_decl();
      } else if (jj_2_9(4)) {
        value_box_decl();
      } else if (jj_2_10(4)) {
        value_forward_decl();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 14, chapter 3.4, CORBA 2.3.1 */
  public void value_forward_decl() {
 /*@bgen(jjtree) value_forward_decl */
  ASTvalue_forward_decl jjtn000 = new ASTvalue_forward_decl(this, IDLParserTreeConstants.JJTVALUE_FORWARD_DECL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
  bool isAbstract = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 17:
        jj_consume_token(17);
                  isAbstract = true;
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
        break;
      }
      jj_consume_token(22);
      ident = identifier();
      jj_consume_token(12);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setIdent(ident);
      jjtn000.setAbstract(isAbstract);
      Scope currentScope = m_symbolTable.getCurrentScope();
      currentScope.addFwdDecl(ident);
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 15, chapter 3.4, CORBA 2.3.1 */
  public void value_box_decl() {
 /*@bgen(jjtree) value_box_decl */
  ASTvalue_box_decl jjtn000 = new ASTvalue_box_decl(this, IDLParserTreeConstants.JJTVALUE_BOX_DECL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(22);
      ident = identifier();
      type_spec();
      jj_consume_token(12);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setIdent(ident);
        // the symbol must not be added before the valuebox definition is completed, 3.8.2, CORBA 2.3.1 spec
        Scope currentScope = m_symbolTable.getCurrentScope();
        currentScope.addSymbol(ident);
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 16, chapter 3.4, CORBA 2.3.1 */
  public void value_abs_decl() {
 /*@bgen(jjtree) value_abs_decl */
  ASTvalue_abs_decl jjtn000 = new ASTvalue_abs_decl(this, IDLParserTreeConstants.JJTVALUE_ABS_DECL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(17);
      jj_consume_token(22);
      ident = identifier();
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 19:
        value_base_inheritance_spec();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
        break;
      }
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 25:
        value_support_inheritance_spec();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
        break;
      }
      jj_consume_token(14);
    jjtn000.setIdent(ident);
        Scope currentScope = m_symbolTable.getCurrentScope();
        currentScope.addSymbol(ident);
        m_symbolTable.openScope(ident, true); // open a scope for type declaration inside this abstract value type

      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 21:
        case 32:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 66:
        case 70:
        case 71:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 84:
        case IDLParserConstants.PRAGMA:
        case IDLParserConstants.ID:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          goto label_6;
          break;
        }
        export();
      }
      label_6: ;
      
      jj_consume_token(15);
      jj_consume_token(12);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        m_symbolTable.closeScope();
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 17, chapter 3.4, CORBA 2.3.1 */
  public void value_decl() {
 /*@bgen(jjtree) value_decl */
  ASTvalue_decl jjtn000 = new ASTvalue_decl(this, IDLParserTreeConstants.JJTVALUE_DECL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      value_header();
        // get the value header node
        SimpleNodeWithIdent header = (SimpleNodeWithIdent) jjtree.peekNode();
        // add the symbol for this value type to the symbol table
        Scope currentScope = m_symbolTable.getCurrentScope();
            currentScope.addSymbol(header.getIdent());
            m_symbolTable.openScope(header.getIdent(), true); // open a scope for type declaration inside this concrete value type

      jj_consume_token(14);
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 21:
        case 26:
        case 27:
        case 28:
        case 32:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 66:
        case 70:
        case 71:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 84:
        case IDLParserConstants.PRAGMA:
        case IDLParserConstants.ID:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          goto label_7;
          break;
        }
        value_element();
      }
      label_7: ;
      
      jj_consume_token(15);
      jj_consume_token(12);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        m_symbolTable.closeScope();
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 18, chapter 3.4, CORBA 2.3.1 */
  public void value_header() {
 /*@bgen(jjtree) value_header */
  ASTvalue_header jjtn000 = new ASTvalue_header(this, IDLParserTreeConstants.JJTVALUE_HEADER);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
  bool isCustom = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 23:
        jj_consume_token(23);
                 isCustom = true;
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
        break;
      }
      jj_consume_token(22);
      ident = identifier();
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 19:
        value_base_inheritance_spec();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
        break;
      }
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 25:
        value_support_inheritance_spec();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
        break;
      }
                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                jjtc000 = false;
                                                                                                                                                jjtn000.setIdent(ident); jjtn000.setCustom(isCustom);
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 19, chapter 3.4, CORBA 2.3.1, separated into two productions */
  public void value_base_inheritance_spec() {
 /*@bgen(jjtree) value_base_inheritance_spec */
  ASTvalue_base_inheritance_spec jjtn000 = new ASTvalue_base_inheritance_spec(this, IDLParserTreeConstants.JJTVALUE_BASE_INHERITANCE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(19);
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 24:
        jj_consume_token(24);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
        break;
      }
      value_name();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          goto label_8;
          break;
        }
        jj_consume_token(20);
        value_name();
      }
      label_8: ;
      
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  public void value_support_inheritance_spec() {
 /*@bgen(jjtree) value_support_inheritance_spec */
  ASTvalue_support_inheritance_spec jjtn000 = new ASTvalue_support_inheritance_spec(this, IDLParserTreeConstants.JJTVALUE_SUPPORT_INHERITANCE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(25);
      interface_name();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          goto label_9;
          break;
        }
        jj_consume_token(20);
        interface_name();
      }
      label_9: ;
      
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 20, chapter 3.4, CORBA 2.3.1 */
  public void value_name() {
 /*@bgen(jjtree) value_name */
  ASTvalue_name jjtn000 = new ASTvalue_name(this, IDLParserTreeConstants.JJTVALUE_NAME);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      scoped_name();
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 21, chapter 3.4, CORBA 2.3.1 */
  public void value_element() {
 /*@bgen(jjtree) value_element */
  ASTvalue_element jjtn000 = new ASTvalue_element(this, IDLParserTreeConstants.JJTVALUE_ELEMENT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 21:
      case 32:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 66:
      case 70:
      case 71:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 84:
      case IDLParserConstants.PRAGMA:
      case IDLParserConstants.ID:
        export();
        break;
      case 26:
      case 27:
        state_member();
        break;
      case 28:
        init_decl();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 22, chapter 3.4, CORBA 2.3.1 */
  public void state_member() {
 /*@bgen(jjtree) state_member */
  ASTstate_member jjtn000 = new ASTstate_member(this, IDLParserTreeConstants.JJTSTATE_MEMBER);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 26:
        jj_consume_token(26);
                 jjtn000.setIsPrivate(false);
        break;
      case 27:
        jj_consume_token(27);
                                                              jjtn000.setIsPrivate(true);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
      type_spec();
      declarators();
      jj_consume_token(12);
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 23, chapter 3.4, CORBA 2.3.1 */
  public void init_decl() {
 /*@bgen(jjtree) init_decl */
  ASTinit_decl jjtn000 = new ASTinit_decl(this, IDLParserTreeConstants.JJTINIT_DECL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(28);
      ident = identifier();
      jj_consume_token(29);
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 31:
        init_param_delcs();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
        break;
      }
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 81:
        raises_expr();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
        break;
      }
      jj_consume_token(12);
                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                          jjtc000 = false;
                                                                                          jjtn000.setIdent(ident);
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 24, chapter 3.4, CORBA 2.3.1 */
  public void init_param_delcs() {
 /*@bgen(jjtree) init_param_delcs */
  ASTinit_param_delcs jjtn000 = new ASTinit_param_delcs(this, IDLParserTreeConstants.JJTINIT_PARAM_DELCS);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      init_param_decl();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          goto label_10;
          break;
        }
        jj_consume_token(20);
        init_param_decl();
      }
      label_10: ;
      
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 25, chapter 3.4, CORBA 2.3.1 */
  public void init_param_decl() {
 /*@bgen(jjtree) init_param_decl */
  ASTinit_param_decl jjtn000 = new ASTinit_param_decl(this, IDLParserTreeConstants.JJTINIT_PARAM_DECL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      init_param_attribute();
      param_type_spec();
      simple_declarator();
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 26, chapter 3.4, CORBA 2.3.1 */
  public void init_param_attribute() {
 /*@bgen(jjtree) init_param_attribute */
  ASTinit_param_attribute jjtn000 = new ASTinit_param_attribute(this, IDLParserTreeConstants.JJTINIT_PARAM_ATTRIBUTE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(31);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 27 chapter 3.4, corba 2.3.1 */
  public void const_dcl() {
 /*@bgen(jjtree) const_dcl */
  ASTconst_dcl jjtn000 = new ASTconst_dcl(this, IDLParserTreeConstants.JJTCONST_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(32);
      const_type();
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case IDLParserConstants.ID:
        ident = identifier();
        break;
      case 33:
        jj_consume_token(33);
                                     ident = "NotANumber";
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
      jj_consume_token(34);
      const_exp();
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
    jjtn000.setIdent(ident);
    Scope currentScope = m_symbolTable.getCurrentScope();
    currentScope.addSymbolValue(ident);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 28 chapter 3.4, corba 2.3.1 */
  public void const_type() {
 /*@bgen(jjtree) const_type */
  ASTconst_type jjtn000 = new ASTconst_type(this, IDLParserTreeConstants.JJTCONST_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(2)) {
        integer_type();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 55:
          char_type();
          break;
        case 56:
          wide_char_type();
          break;
        case 57:
          boolean_type();
          break;
        case 50:
        case 51:
        case 52:
          floating_pt_type();
          break;
        case 70:
          string_type();
          break;
        case 71:
          wide_string_type();
          break;
        case 83:
          fixed_pt_const_type();
          break;
        case 21:
        case IDLParserConstants.ID:
          scoped_name();
          break;
        case 58:
          octet_type();
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 29 chapter 3.4, corba 2.3.1 */
  public void const_exp() {
 /*@bgen(jjtree) const_exp */
  ASTconst_exp jjtn000 = new ASTconst_exp(this, IDLParserTreeConstants.JJTCONST_EXP);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      or_expr();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 30 chapter 3.4 corba 2.3.1 (resolved left side recursion here) */
  public void or_expr() {
 /*@bgen(jjtree) or_expr */
  ASTor_expr jjtn000 = new ASTor_expr(this, IDLParserTreeConstants.JJTOR_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      xor_expr();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          goto label_11;
          break;
        }
        jj_consume_token(35);
        xor_expr();
      }
      label_11: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 31 chapter 3.4 corba 2.3.1 (reformulated without recursion) */
  public void xor_expr() {
 /*@bgen(jjtree) xor_expr */
  ASTxor_expr jjtn000 = new ASTxor_expr(this, IDLParserTreeConstants.JJTXOR_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      and_expr();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 36:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          goto label_12;
          break;
        }
        jj_consume_token(36);
        and_expr();
      }
      label_12: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 32 chapter 3.4 corba 2.3.1 (reformulated without recursion) */
  public void and_expr() {
 /*@bgen(jjtree) and_expr */
  ASTand_expr jjtn000 = new ASTand_expr(this, IDLParserTreeConstants.JJTAND_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      shift_expr();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 37:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          goto label_13;
          break;
        }
        jj_consume_token(37);
        shift_expr();
      }
      label_13: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 33 */
  public void shift_expr() {
 /*@bgen(jjtree) shift_expr */
  ASTshift_expr jjtn000 = new ASTshift_expr(this, IDLParserTreeConstants.JJTSHIFT_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      add_expr();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 38:
        case 39:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          goto label_14;
          break;
        }
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 38:
          jj_consume_token(38);
                        jjtn000.AppendShiftOperation(ShiftOps.Right);
          break;
        case 39:
          jj_consume_token(39);
                        jjtn000.AppendShiftOperation(ShiftOps.Left);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
        add_expr();
      }
      label_14: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 34 */
  public void add_expr() {
 /*@bgen(jjtree) add_expr */
  ASTadd_expr jjtn000 = new ASTadd_expr(this, IDLParserTreeConstants.JJTADD_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      mult_expr();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 40:
        case 41:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          goto label_15;
          break;
        }
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 40:
          jj_consume_token(40);
                        jjtn000.AppendAddOperation(AddOps.Plus);
          break;
        case 41:
          jj_consume_token(41);
                        jjtn000.AppendAddOperation(AddOps.Minus);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
        mult_expr();
      }
      label_15: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 35 */
  public void mult_expr() {
 /*@bgen(jjtree) mult_expr */
  ASTmult_expr jjtn000 = new ASTmult_expr(this, IDLParserTreeConstants.JJTMULT_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      unary_expr();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 42:
        case 43:
        case 44:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          goto label_16;
          break;
        }
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 42:
          jj_consume_token(42);
                         jjtn000.AppendMultOperation(MultOps.Mult);
          break;
        case 43:
          jj_consume_token(43);
                         jjtn000.AppendMultOperation(MultOps.Div);
          break;
        case 44:
          jj_consume_token(44);
                         jjtn000.AppendMultOperation(MultOps.Mod);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
        unary_expr();
      }
      label_16: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 36 */
  public void unary_expr() {
 /*@bgen(jjtree) unary_expr */
  ASTunary_expr jjtn000 = new ASTunary_expr(this, IDLParserTreeConstants.JJTUNARY_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);UnaryOps unary_op = UnaryOps.UnaryNone;
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 40:
      case 41:
      case 45:
        unary_op = unary_operator();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
        break;
      }
      primary_expr();
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                   jjtn000.SetUnaryOperation(unary_op);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 37 chapter 3.4 corba 2.3.1 */
  public UnaryOps unary_operator() {
    switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
    case 41:
      jj_consume_token(41);
        {if (true) return UnaryOps.UnaryMinus;}
      break;
    case 40:
      jj_consume_token(40);
        {if (true) return UnaryOps.UnaryPlus;}
      break;
    case 45:
      jj_consume_token(45);
        {if (true) return UnaryOps.UnaryNegate;}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
      break;
    }
    throw new Error("Missing return statement in function");
  }

/* Production 38 chapter 3.4 corba 2.3.1 */
  public void primary_expr() {
 /*@bgen(jjtree) primary_expr */
  ASTprimary_expr jjtn000 = new ASTprimary_expr(this, IDLParserTreeConstants.JJTPRIMARY_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 21:
      case IDLParserConstants.ID:
        scoped_name();
        break;
      case 33:
      case 46:
      case 47:
      case 85:
      case IDLParserConstants.OCTALINT:
      case IDLParserConstants.DECIMALINT:
      case IDLParserConstants.HEXADECIMALINT:
      case IDLParserConstants.FLOATONE:
      case IDLParserConstants.FLOATTWO:
      case IDLParserConstants.CHARACTER:
      case IDLParserConstants.WIDECHARACTER:
      case IDLParserConstants.STRING:
      case IDLParserConstants.WIDESTRING:
      case IDLParserConstants.FIXED:
        literal();
        break;
      case 29:
        jj_consume_token(29);
        const_exp();
        jj_consume_token(30);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 39 chapter 3.4 corba 2.3.1 */
  public void literal() {
 /*@bgen(jjtree) literal */
  ASTliteral jjtn000 = new ASTliteral(this, IDLParserTreeConstants.JJTLITERAL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Object litVal;
    try {
      if (jj_2_12(2)) {
        litVal = integer_literal();
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.setLitVal(new IntegerLiteral((Decimal)litVal));
      } else {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case IDLParserConstants.STRING:
          litVal = string_literal();
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.setLitVal(new StringLiteral((String)litVal, false));
          break;
        default:
          jj_la1[46] = jj_gen;
          if (jj_2_13(2)) {
            litVal = wide_string_literal();
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   jjtn000.setLitVal(new StringLiteral((String)litVal, true));
          } else {
            switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
            case IDLParserConstants.CHARACTER:
              litVal = character_literal();
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.setLitVal(new CharLiteral((Char)litVal, false));
              break;
            default:
              jj_la1[47] = jj_gen;
              if (jj_2_14(2)) {
                litVal = wide_character_literal();
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      jjtn000.setLitVal(new CharLiteral((Char)litVal, true));
              } else if (jj_2_15(2)) {
                litVal = fixed_pt_literal();
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                {if (true) throw new NotSupportedException("fixed point literal not yet supported");}
              } else if (jj_2_16(2)) {
                litVal = floating_pt_literal();
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   jjtn000.setLitVal(new FloatLiteral((Double)litVal));
              } else {
                switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
                case 46:
                case 47:
                  litVal = boolean_literal();
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.setLitVal(new BooleanLiteral((Boolean)litVal));
                  break;
                default:
                  jj_la1[48] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                  break;
                }
              }
              break;
            }
          }
          break;
        }
      }
    } catch (Exception jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
{if (true) throw ;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

/* Production 40, chapter 3.4 corba 2.3.1 */
  public System.Boolean boolean_literal() {
    switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
    case 46:
      jj_consume_token(46);
           {if (true) return true;}
      break;
    case 47:
      jj_consume_token(47);
            {if (true) return false;}
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
      break;
    }
    throw new Error("Missing return statement in function");
  }

/* Production 41, chapter 3.4, corba 2.3.1 */
  public void positive_int_const() {
 /*@bgen(jjtree) positive_int_const */
  ASTpositive_int_const jjtn000 = new ASTpositive_int_const(this, IDLParserTreeConstants.JJTPOSITIVE_INT_CONST);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      const_exp();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 42: chapter 3.4 corba 2.3.1 */
  public void type_dcl() {
 /*@bgen(jjtree) type_dcl */
  ASTtype_dcl jjtn000 = new ASTtype_dcl(this, IDLParserTreeConstants.JJTTYPE_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 48:
        jj_consume_token(48);
        type_declarator();
        break;
      case 61:
        struct_type();
        break;
      case 62:
        union_type();
        break;
      case 66:
        enum_type();
        break;
      case 49:
        jj_consume_token(49);
        simple_declarator();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 43, chapter 3.4, corba 2.3.1 */
  public void type_declarator() {
 /*@bgen(jjtree) type_declarator */
  ASTtype_declarator jjtn000 = new ASTtype_declarator(this, IDLParserTreeConstants.JJTTYPE_DECLARATOR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type_spec();
      declarators();
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
        Node declaratorNodes = jjtn000.jjtGetChild(1);
            Scope currentScope = m_symbolTable.getCurrentScope();
        for (int i = 0; i < declaratorNodes.jjtGetNumChildren(); i++) {
            ASTdeclarator decl = (ASTdeclarator) declaratorNodes.jjtGetChild(i);
            if (decl.jjtGetChild(0) is ASTsimple_declarator) {
                String ident = ((SimpleNodeWithIdent) decl.jjtGetChild(0)).getIdent();
                currentScope.addTypeDef(ident);
            } else if (decl.jjtGetChild(0) is ASTcomplex_declarator) {
                /* complex_declarator contains an array_declarator */
                String ident = ((SimpleNodeWithIdent) decl.jjtGetChild(0).jjtGetChild(0)).getIdent();
                currentScope.addTypeDef(ident);
            }
        }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 44, chapter 3.4, corba 2.3.1 */
  public void type_spec() {
 /*@bgen(jjtree) type_spec */
  ASTtype_spec jjtn000 = new ASTtype_spec(this, IDLParserTreeConstants.JJTTYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 21:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 67:
      case 70:
      case 71:
      case 83:
      case 84:
      case IDLParserConstants.ID:
        simple_type_spec();
        break;
      case 61:
      case 62:
      case 66:
        constr_type_spec();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 45, chapter 3.4, corba 2.3.1 */
  public void simple_type_spec() {
 /*@bgen(jjtree) simple_type_spec */
  ASTsimple_type_spec jjtn000 = new ASTsimple_type_spec(this, IDLParserTreeConstants.JJTSIMPLE_TYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 84:
        base_type_spec();
        break;
      case 67:
      case 70:
      case 71:
      case 83:
        template_type_spec();
        break;
      case 21:
      case IDLParserConstants.ID:
        scoped_name();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 46: chapter 3.4 corba 2.3.1 */
  public void base_type_spec() {
 /*@bgen(jjtree) base_type_spec */
  ASTbase_type_spec jjtn000 = new ASTbase_type_spec(this, IDLParserTreeConstants.JJTBASE_TYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_17(2)) {
        floating_pt_type();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 52:
        case 53:
        case 54:
          integer_type();
          break;
        case 55:
          char_type();
          break;
        case 56:
          wide_char_type();
          break;
        case 57:
          boolean_type();
          break;
        case 58:
          octet_type();
          break;
        case 59:
          any_type();
          break;
        case 60:
          object_type();
          break;
        case 84:
          value_base_type();
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 47: chapter 3.4 corba 2.3.1 */
  public void template_type_spec() {
 /*@bgen(jjtree) template_type_spec */
  ASTtemplate_type_spec jjtn000 = new ASTtemplate_type_spec(this, IDLParserTreeConstants.JJTTEMPLATE_TYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 67:
        sequence_type();
        break;
      case 70:
        string_type();
        break;
      case 71:
        wide_string_type();
        break;
      case 83:
        fixed_pt_type();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 48, chapter 3.4, corba 2.3.1 */
  public void constr_type_spec() {
 /*@bgen(jjtree) constr_type_spec */
  ASTconstr_type_spec jjtn000 = new ASTconstr_type_spec(this, IDLParserTreeConstants.JJTCONSTR_TYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 61:
        struct_type();
        break;
      case 62:
        union_type();
        break;
      case 66:
        enum_type();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 49, chapter 3.4, corba 2.3.1 */
  public void declarators() {
 /*@bgen(jjtree) declarators */
  ASTdeclarators jjtn000 = new ASTdeclarators(this, IDLParserTreeConstants.JJTDECLARATORS);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      declarator();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          goto label_17;
          break;
        }
        jj_consume_token(20);
        declarator();
      }
      label_17: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 50, chapter 3.4, corba 2.3.1 */
  public void declarator() {
 /*@bgen(jjtree) declarator */
  ASTdeclarator jjtn000 = new ASTdeclarator(this, IDLParserTreeConstants.JJTDECLARATOR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_18(2)) {
        complex_declarator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case IDLParserConstants.ID:
          simple_declarator();
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 51, chapter 3.4, corba 2.3.1 */
  public void simple_declarator() {
 /*@bgen(jjtree) simple_declarator */
  ASTsimple_declarator jjtn000 = new ASTsimple_declarator(this, IDLParserTreeConstants.JJTSIMPLE_DECLARATOR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      ident = identifier();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.setIdent(ident);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 52, chapter 3.4, corba 2.3.1 */
  public void complex_declarator() {
 /*@bgen(jjtree) complex_declarator */
  ASTcomplex_declarator jjtn000 = new ASTcomplex_declarator(this, IDLParserTreeConstants.JJTCOMPLEX_DECLARATOR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      array_declarator();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 53, changed to the style used for int_types */
  public void floating_pt_type() {
 /*@bgen(jjtree) floating_pt_type */
  ASTfloating_pt_type jjtn000 = new ASTfloating_pt_type(this, IDLParserTreeConstants.JJTFLOATING_PT_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 52:
        floating_pt_type_longdouble();
        break;
      case 50:
        floating_pt_type_float();
        break;
      case 51:
        floating_pt_type_double();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 53 a */
  public void floating_pt_type_float() {
 /*@bgen(jjtree) floating_pt_type_float */
  ASTfloating_pt_type_float jjtn000 = new ASTfloating_pt_type_float(this, IDLParserTreeConstants.JJTFLOATING_PT_TYPE_FLOAT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(50);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 53 b */
  public void floating_pt_type_double() {
 /*@bgen(jjtree) floating_pt_type_double */
  ASTfloating_pt_type_double jjtn000 = new ASTfloating_pt_type_double(this, IDLParserTreeConstants.JJTFLOATING_PT_TYPE_DOUBLE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(51);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 53 c */
  public void floating_pt_type_longdouble() {
 /*@bgen(jjtree) floating_pt_type_longdouble */
  ASTfloating_pt_type_longdouble jjtn000 = new ASTfloating_pt_type_longdouble(this, IDLParserTreeConstants.JJTFLOATING_PT_TYPE_LONGDOUBLE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(52);
      jj_consume_token(51);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 54, chapter 3.4, corba 2.3.1 */
  public void integer_type() {
 /*@bgen(jjtree) integer_type */
  ASTinteger_type jjtn000 = new ASTinteger_type(this, IDLParserTreeConstants.JJTINTEGER_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 52:
      case 53:
        signed_int();
        break;
      case 54:
        unsigned_int();
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 55, chapter 3.4, corba 2.3.1 */
  public void signed_int() {
 /*@bgen(jjtree) signed_int */
  ASTsigned_int jjtn000 = new ASTsigned_int(this, IDLParserTreeConstants.JJTSIGNED_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_19(3)) {
        signed_longlong_int();
      } else if (jj_2_20(3)) {
        signed_long_int();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 53:
          signed_short_int();
          break;
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 56, chapter 3.4, corba 2.3.1 */
  public void signed_short_int() {
 /*@bgen(jjtree) signed_short_int */
  ASTsigned_short_int jjtn000 = new ASTsigned_short_int(this, IDLParserTreeConstants.JJTSIGNED_SHORT_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(53);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 57, chapter 3.4, corba 2.3.1 */
  public void signed_long_int() {
 /*@bgen(jjtree) signed_long_int */
  ASTsigned_long_int jjtn000 = new ASTsigned_long_int(this, IDLParserTreeConstants.JJTSIGNED_LONG_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(52);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 58, chapter 3.4, corba 2.3.1 */
  public void signed_longlong_int() {
 /*@bgen(jjtree) signed_longlong_int */
  ASTsigned_longlong_int jjtn000 = new ASTsigned_longlong_int(this, IDLParserTreeConstants.JJTSIGNED_LONGLONG_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(52);
      jj_consume_token(52);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 59, chapter 3.4 corba 2.3.1 */
  public void unsigned_int() {
 /*@bgen(jjtree) unsigned_int */
  ASTunsigned_int jjtn000 = new ASTunsigned_int(this, IDLParserTreeConstants.JJTUNSIGNED_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_21(3)) {
        unsigned_longlong_int();
      } else if (jj_2_22(3)) {
        unsigned_long_int();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 54:
          unsigned_short_int();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
          break;
        }
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 60, chapter 3.4, corba 2.3.1 */
  public void unsigned_short_int() {
 /*@bgen(jjtree) unsigned_short_int */
  ASTunsigned_short_int jjtn000 = new ASTunsigned_short_int(this, IDLParserTreeConstants.JJTUNSIGNED_SHORT_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(54);
      jj_consume_token(53);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 61, chapter 3.4, corba 2.3.1 */
  public void unsigned_long_int() {
 /*@bgen(jjtree) unsigned_long_int */
  ASTunsigned_long_int jjtn000 = new ASTunsigned_long_int(this, IDLParserTreeConstants.JJTUNSIGNED_LONG_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(54);
      jj_consume_token(52);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 62, chapter 3.4, corba 2.3.1 */
  public void unsigned_longlong_int() {
 /*@bgen(jjtree) unsigned_longlong_int */
  ASTunsigned_longlong_int jjtn000 = new ASTunsigned_longlong_int(this, IDLParserTreeConstants.JJTUNSIGNED_LONGLONG_INT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(54);
      jj_consume_token(52);
      jj_consume_token(52);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 63, chapter 3.4, corba 2.3.1 */
  public void char_type() {
 /*@bgen(jjtree) char_type */
  ASTchar_type jjtn000 = new ASTchar_type(this, IDLParserTreeConstants.JJTCHAR_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(55);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 64, chapter 3.4, corba 2.3.1 */
  public void wide_char_type() {
 /*@bgen(jjtree) wide_char_type */
  ASTwide_char_type jjtn000 = new ASTwide_char_type(this, IDLParserTreeConstants.JJTWIDE_CHAR_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(56);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 65, chapter 3.4, corba 2.3.1  */
  public void boolean_type() {
 /*@bgen(jjtree) boolean_type */
  ASTboolean_type jjtn000 = new ASTboolean_type(this, IDLParserTreeConstants.JJTBOOLEAN_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(57);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 66, chapter 3.4, corba 2.3.1 */
  public void octet_type() {
 /*@bgen(jjtree) octet_type */
  ASToctet_type jjtn000 = new ASToctet_type(this, IDLParserTreeConstants.JJTOCTET_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(58);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 67, chapter 3.4, corba 2.3.1 */
  public void any_type() {
 /*@bgen(jjtree) any_type */
  ASTany_type jjtn000 = new ASTany_type(this, IDLParserTreeConstants.JJTANY_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(59);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 68, chapter 3.4, corba 2.3.1 */
  public void object_type() {
 /*@bgen(jjtree) object_type */
  ASTobject_type jjtn000 = new ASTobject_type(this, IDLParserTreeConstants.JJTOBJECT_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(60);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 69, chapter 3.4, corba 2.3.1 */
  public void struct_type() {
 /*@bgen(jjtree) struct_type */
  ASTstruct_type jjtn000 = new ASTstruct_type(this, IDLParserTreeConstants.JJTSTRUCT_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(61);
      ident = identifier();
    // recursive definition using a sequence is permitted --> publish symbol already here
    Scope currentScope = m_symbolTable.getCurrentScope();
    currentScope.addSymbol(ident);
    jjtn000.setIdent(ident);
    m_symbolTable.openScope(ident, true); // open a scope for type declaration inside the struct

      jj_consume_token(14);
      member_list();
      jj_consume_token(15);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
    m_symbolTable.closeScope();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 70, chapter 3.4, corba 2.3.1 */
  public void member_list() {
 /*@bgen(jjtree) member_list */
  ASTmember_list jjtn000 = new ASTmember_list(this, IDLParserTreeConstants.JJTMEMBER_LIST);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      while (true) {
        member();
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 21:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 66:
        case 67:
        case 70:
        case 71:
        case 83:
        case 84:
        case IDLParserConstants.ID:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          goto label_18;
          break;
        }
      }
      label_18: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 71, chapter 3.4, corba 2.3.1 */
  public void member() {
 /*@bgen(jjtree) member */
  ASTmember jjtn000 = new ASTmember(this, IDLParserTreeConstants.JJTMEMBER);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type_spec();
      declarators();
      jj_consume_token(12);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 72, chapter 3.4, corba 2.3.1 */
  public void union_type() {
 /*@bgen(jjtree) union_type */
  ASTunion_type jjtn000 = new ASTunion_type(this, IDLParserTreeConstants.JJTUNION_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(62);
      ident = identifier();
    // recursive definition using a sequence is permitted --> publish symbol already here
    Scope currentScope = m_symbolTable.getCurrentScope();
    currentScope.addSymbol(ident);
    jjtn000.setIdent(ident);
      jj_consume_token(63);
      jj_consume_token(29);
     m_symbolTable.openScope(ident, true); // open a scope for type declaration inside the union

      switch_type_spec();
      jj_consume_token(30);
      jj_consume_token(14);
      switch_body();
      jj_consume_token(15);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     m_symbolTable.closeScope();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 73, chapter 3.4, corba 2.3.1 */
  public void switch_type_spec() {
 /*@bgen(jjtree) switch_type_spec */
  ASTswitch_type_spec jjtn000 = new ASTswitch_type_spec(this, IDLParserTreeConstants.JJTSWITCH_TYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 52:
      case 53:
      case 54:
        integer_type();
        break;
      case 55:
        char_type();
        break;
      case 57:
        boolean_type();
        break;
      case 66:
        enum_type();
        break;
      case 21:
      case IDLParserConstants.ID:
        scoped_name();
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 74, chapter 3.4, corba 2.3.1 */
  public void switch_body() {
 /*@bgen(jjtree) switch_body */
  ASTswitch_body jjtn000 = new ASTswitch_body(this, IDLParserTreeConstants.JJTSWITCH_BODY);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      while (true) {
        casex();
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 64:
        case 65:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          goto label_19;
          break;
        }
      }
      label_19: ;
      
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 75, chapter 3.4, corba 2.3.1 (renamed case -> casex, because case is a keyword in java) */
  public void casex() {
 /*@bgen(jjtree) casex */
  ASTcasex jjtn000 = new ASTcasex(this, IDLParserTreeConstants.JJTCASEX);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      while (true) {
        case_label();
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 64:
        case 65:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          goto label_20;
          break;
        }
      }
      label_20: ;
      
      element_spec();
      jj_consume_token(12);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 76, chapter 3.4, corba 2.3.1 */
  public void case_label() {
 /*@bgen(jjtree) case_label */
  ASTcase_label jjtn000 = new ASTcase_label(this, IDLParserTreeConstants.JJTCASE_LABEL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 64:
        jj_consume_token(64);
        const_exp();
        jj_consume_token(19);
        break;
      case 65:
        jj_consume_token(65);
        jj_consume_token(19);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                   jjtn000.setDefault();
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 77, chapter 3.4, corba 2.3.1 */
  public void element_spec() {
 /*@bgen(jjtree) element_spec */
  ASTelement_spec jjtn000 = new ASTelement_spec(this, IDLParserTreeConstants.JJTELEMENT_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type_spec();
      declarator();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 78, chapter 3.4, corba 2.3.1 */
  public void enum_type() {
 /*@bgen(jjtree) enum_type */
  ASTenum_type jjtn000 = new ASTenum_type(this, IDLParserTreeConstants.JJTENUM_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(66);
      ident = identifier();
      jj_consume_token(14);
      enumerator();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          goto label_21;
          break;
        }
        jj_consume_token(20);
        enumerator();
      }
      label_21: ;
      
      jj_consume_token(15);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setIdent(ident);
    Scope currentScope = m_symbolTable.getCurrentScope();
    currentScope.addSymbol(ident);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 79, chapter 3.4, corba 2.3.1 */
  public void enumerator() {
 /*@bgen(jjtree) enumerator */
  ASTenumerator jjtn000 = new ASTenumerator(this, IDLParserTreeConstants.JJTENUMERATOR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      ident = identifier();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
      jjtn000.setIdent(ident);
      Scope currentScope = m_symbolTable.getCurrentScope();
      currentScope.addSymbolValue(ident);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 80, chapter 3.4, corba 2.3.1 */
  public void sequence_type() {
 /*@bgen(jjtree) sequence_type */
  ASTsequence_type jjtn000 = new ASTsequence_type(this, IDLParserTreeConstants.JJTSEQUENCE_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(67);
      jj_consume_token(68);
      simple_type_spec();
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 20:
        jj_consume_token(20);
        positive_int_const();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
        break;
      }
      jj_consume_token(69);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 81, chapter 3.4, corba 2.3.1 */
  public void string_type() {
 /*@bgen(jjtree) string_type */
  ASTstring_type jjtn000 = new ASTstring_type(this, IDLParserTreeConstants.JJTSTRING_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(70);
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 68:
        jj_consume_token(68);
        positive_int_const();
        jj_consume_token(69);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 82, chapter 3.4, corba 2.3.1 */
  public void wide_string_type() {
 /*@bgen(jjtree) wide_string_type */
  ASTwide_string_type jjtn000 = new ASTwide_string_type(this, IDLParserTreeConstants.JJTWIDE_STRING_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(71);
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 68:
        jj_consume_token(68);
        positive_int_const();
        jj_consume_token(69);
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 83, chapter 3.4, corba 2.3.1 */
  public void array_declarator() {
 /*@bgen(jjtree) array_declarator */
  ASTarray_declarator jjtn000 = new ASTarray_declarator(this, IDLParserTreeConstants.JJTARRAY_DECLARATOR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      ident = identifier();
      while (true) {
        fixed_array_size();
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 72:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          goto label_22;
          break;
        }
      }
      label_22: ;
      
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.setIdent(ident);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 84, chapter 3.4, corba 2.3.1*/
  public void fixed_array_size() {
 /*@bgen(jjtree) fixed_array_size */
  ASTfixed_array_size jjtn000 = new ASTfixed_array_size(this, IDLParserTreeConstants.JJTFIXED_ARRAY_SIZE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(72);
      positive_int_const();
      jj_consume_token(73);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 85, chapter 3.4, corba 2.3.1 */
  public void attr_dcl() {
 /*@bgen(jjtree) attr_dcl */
  ASTattr_dcl jjtn000 = new ASTattr_dcl(this, IDLParserTreeConstants.JJTATTR_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);bool isReadOnly = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 74:
        jj_consume_token(74);
                 isReadOnly = true;
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
        break;
      }
      jj_consume_token(75);
      param_type_spec();
      simple_declarator();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          goto label_23;
          break;
        }
        jj_consume_token(20);
        simple_declarator();
      }
      label_23: ;
      
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setReadOnly(isReadOnly);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 86, chapter 3.4, corba 2.3.1 */
  public void except_dcl() {
 /*@bgen(jjtree) except_dcl */
  ASTexcept_dcl jjtn000 = new ASTexcept_dcl(this, IDLParserTreeConstants.JJTEXCEPT_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
    try {
      jj_consume_token(76);
      ident = identifier();
    Scope currentScope = m_symbolTable.getCurrentScope();
    currentScope.addSymbol(ident);
    jjtn000.setIdent(ident);
    m_symbolTable.openScope(ident, true); // open a scope for type declaration inside the exception

      jj_consume_token(14);
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 21:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 66:
        case 67:
        case 70:
        case 71:
        case 83:
        case 84:
        case IDLParserConstants.ID:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          goto label_24;
          break;
        }
        member();
      }
      label_24: ;
      
      jj_consume_token(15);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    m_symbolTable.closeScope();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 87, chapter 3.4, corba 2.3.1 */
  public void op_dcl() {
 /*@bgen(jjtree) op_dcl */
  ASTop_dcl jjtn000 = new ASTop_dcl(this, IDLParserTreeConstants.JJTOP_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ident = "";
  int opAttr = ASTop_dcl.OP_Attr_NONE;
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 77:
        opAttr = op_attribute();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
        break;
      }
      op_type_spec();
      ident = identifier();
      parameter_dcls();
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 81:
        raises_expr();
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
        break;
      }
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 82:
        context_expr();
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
        break;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setIdent(ident); /* set the identifier for this node */
    jjtn000.setOpAttr(opAttr);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 88, chapter 3.4, corba 2.3.1 */
  public int op_attribute() {
    jj_consume_token(77);
             {if (true) return ASTop_dcl.OP_Attr_ONEWAY;}
    throw new Error("Missing return statement in function");
  }

/* Production 89, chapter 3.4, corba 2.3.1 */
  public void op_type_spec() {
 /*@bgen(jjtree) op_type_spec */
  ASTop_type_spec jjtn000 = new ASTop_type_spec(this, IDLParserTreeConstants.JJTOP_TYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 21:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 70:
      case 71:
      case 84:
      case IDLParserConstants.ID:
        param_type_spec();
        break;
      case 78:
        jj_consume_token(78);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 90, chapter 3.4, corba 2.3.1 */
  public void parameter_dcls() {
 /*@bgen(jjtree) parameter_dcls */
  ASTparameter_dcls jjtn000 = new ASTparameter_dcls(this, IDLParserTreeConstants.JJTPARAMETER_DCLS);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(29);
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 31:
      case 79:
      case 80:
        param_dcl();
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
          case 20:
            ;
            break;
          default:
            jj_la1[79] = jj_gen;
            goto label_25;
            break;
          }
          jj_consume_token(20);
          param_dcl();
        }
        label_25: ;
        
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
        break;
      }
      jj_consume_token(30);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 91, chapter 3.4, corba 2.3.1 */
  public void param_dcl() {
 /*@bgen(jjtree) param_dcl */
  ASTparam_dcl jjtn000 = new ASTparam_dcl(this, IDLParserTreeConstants.JJTPARAM_DCL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      param_attribute();
      param_type_spec();
      simple_declarator();
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 92, chapter 3.4, corba 2.3.1 */
  public void param_attribute() {
 /*@bgen(jjtree) param_attribute */
  ASTparam_attribute jjtn000 = new ASTparam_attribute(this, IDLParserTreeConstants.JJTPARAM_ATTRIBUTE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 31:
        jj_consume_token(31);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
         jjtn000.setParamDir(ASTparam_attribute.ParamDir_IN);
        break;
      case 79:
        jj_consume_token(79);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setParamDir(ASTparam_attribute.ParamDir_OUT);
        break;
      case 80:
        jj_consume_token(80);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setParamDir(ASTparam_attribute.ParamDir_INOUT);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 93, chapter 3.4, corba 2.3.1 */
  public void raises_expr() {
 /*@bgen(jjtree) raises_expr */
  ASTraises_expr jjtn000 = new ASTraises_expr(this, IDLParserTreeConstants.JJTRAISES_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(81);
      jj_consume_token(29);
      scoped_name();
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          goto label_26;
          break;
        }
        jj_consume_token(20);
        scoped_name();
      }
      label_26: ;
      
      jj_consume_token(30);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 94, chapter 3.4, corba 2.3.1 */
  public void context_expr() {
 /*@bgen(jjtree) context_expr */
  ASTcontext_expr jjtn000 = new ASTcontext_expr(this, IDLParserTreeConstants.JJTCONTEXT_EXPR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String contElem = "";
    try {
      jj_consume_token(82);
      jj_consume_token(29);
      contElem = string_literal();
                                              jjtn000.AddContextElement(contElem);
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
        case 20:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          goto label_27;
          break;
        }
        jj_consume_token(20);
        contElem = string_literal();
                                      jjtn000.AddContextElement(contElem);
      }
      label_27: ;
      
      jj_consume_token(30);
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 95, chapter 3.4, corba 2.3.1 */
  public void param_type_spec() {
 /*@bgen(jjtree) param_type_spec */
  ASTparam_type_spec jjtn000 = new ASTparam_type_spec(this, IDLParserTreeConstants.JJTPARAM_TYPE_SPEC);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 84:
        base_type_spec();
        break;
      case 70:
        string_type();
        break;
      case 71:
        wide_string_type();
        break;
      case 21:
      case IDLParserConstants.ID:
        scoped_name();
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
    } catch (Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  {if (true) throw ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Production 96, chapter 3.4, corba 2.3.1 */
  public void fixed_pt_type() {
 /*@bgen(jjtree) fixed_pt_type */
  ASTfixed_pt_type jjtn000 = new ASTfixed_pt_type(this, IDLParserTreeConstants.JJTFIXED_PT_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(83);
      jj_consume_token(68);
      positive_int_const();
      jj_consume_token(20);
      positive_int_const();
      jj_consume_token(69);
    } catch (Exception jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    {if (true) throw ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 97, chapter 3.4, corba 2.3.1 */
  public void fixed_pt_const_type() {
 /*@bgen(jjtree) fixed_pt_const_type */
  ASTfixed_pt_const_type jjtn000 = new ASTfixed_pt_const_type(this, IDLParserTreeConstants.JJTFIXED_PT_CONST_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(83);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Production 98, chapter 3.4, corba 2.3.1 */
  public void value_base_type() {
 /*@bgen(jjtree) value_base_type */
  ASTvalue_base_type jjtn000 = new ASTvalue_base_type(this, IDLParserTreeConstants.JJTVALUE_BASE_TYPE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(84);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Definitions of complex regular expressions follow */
  public String identifier() {
  Token idToken;
    idToken = jj_consume_token(IDLParserConstants.ID);
                   {if (true) return idToken.image;}
    throw new Error("Missing return statement in function");
  }

  public System.Decimal integer_literal() {
  Token intToken;
    switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
    case IDLParserConstants.OCTALINT:
      intToken = jj_consume_token(IDLParserConstants.OCTALINT);
                                String octVal = intToken.image;
                                // remove leading 0
                                octVal = octVal.Substring(1);
                                // check for l, L, u, U at the end
                                if (octVal.EndsWith("l") || octVal.EndsWith("L") || octVal.EndsWith("u") || octVal.EndsWith("U")) {
                                    octVal = octVal.Substring(0, octVal.Length-1); // remove u, U, L, l
                                }
                                {if (true) return StringToIntConverter.Parse(octVal, 8);}
      break;
    case IDLParserConstants.DECIMALINT:
      intToken = jj_consume_token(IDLParserConstants.DECIMALINT);
                                String val = intToken.image;
                                // check for l, L, u, U at the end
                                if (val.EndsWith("l") || val.EndsWith("L") || val.EndsWith("u") || val.EndsWith("U")) {
                                    val = val.Substring(0, val.Length-1); // remove u, U, L, l
                                }
                                {if (true) return StringToIntConverter.Parse(val, 10);}
      break;
    case IDLParserConstants.HEXADECIMALINT:
      intToken = jj_consume_token(IDLParserConstants.HEXADECIMALINT);
                                String hexVal = intToken.image;
                                // has leading leading 0x, remove it
                                hexVal = hexVal.Substring(2);
                                // check for l, L, u, U at the end
                                if (hexVal.EndsWith("l") || hexVal.EndsWith("L") || hexVal.EndsWith("u") || hexVal.EndsWith("U")) {
                                    hexVal = hexVal.Substring(0, hexVal.Length-1); // remove u, U, L, l
                                }
                                {if (true) return StringToIntConverter.Parse(hexVal, 16);}
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
      break;
    }
    throw new Error("Missing return statement in function");
  }

  public String string_literal() {
  Token stringToken;
    stringToken = jj_consume_token(IDLParserConstants.STRING);
                                    String result = stringToken.image;
                                    // remove "" around the literal
                                    {if (true) return result.Substring(1, result.Length - 2);}
    throw new Error("Missing return statement in function");
  }

  public String wide_string_literal() {
  Token stringToken;
    stringToken = jj_consume_token(IDLParserConstants.WIDESTRING);
                                    String result = stringToken.image;
                                    // remove L prefix and remove "" around the literal
                                    {if (true) return result.Substring(2, result.Length - 3);}
    throw new Error("Missing return statement in function");
  }

  public char character_literal() {
  Token charToken;
    charToken = jj_consume_token(IDLParserConstants.CHARACTER);
          // char is enclosed by ''
          {if (true) return ParseCharLiteral(charToken.image.Substring(1, charToken.image.Length - 2));}
    throw new Error("Missing return statement in function");
  }

  public char wide_character_literal() {
  Token charToken;
    charToken = jj_consume_token(IDLParserConstants.WIDECHARACTER);
          // wide char is prepended by a L and enclosed by ''
          {if (true) return ParseWideCharLiteral(charToken.image.Substring(2, charToken.image.Length - 3));}
    throw new Error("Missing return statement in function");
  }

  public System.Double floating_pt_literal() {
  Token floatLiteral = null;
    switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
    case IDLParserConstants.FLOATONE:
    case IDLParserConstants.FLOATTWO:
      switch ((jj_ntk==-1)?jj_ntk_calc():jj_ntk) {
      case IDLParserConstants.FLOATONE:
        floatLiteral = jj_consume_token(IDLParserConstants.FLOATONE);
        break;
      case IDLParserConstants.FLOATTWO:
        floatLiteral = jj_consume_token(IDLParserConstants.FLOATTWO);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
        break;
      }
      String floatVal = floatLiteral.image;
      if (floatVal.EndsWith("f") || floatVal.EndsWith("F") || floatVal.EndsWith("l") || floatVal.EndsWith("L")) {
        floatVal = floatVal.Substring(0, floatVal.Length - 1);
      }
      {if (true) return Double.Parse(floatVal, System.Globalization.CultureInfo.InvariantCulture);}
      break;
    case 33:
      jj_consume_token(33);
    {if (true) return Double.NaN;}
      break;
    case 85:
      jj_consume_token(85);
    {if (true) return Double.PositiveInfinity;}
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
      break;
    }
    throw new Error("Missing return statement in function");
  }

  public System.Decimal fixed_pt_literal() {
  Token fixedLiteral;
    fixedLiteral = jj_consume_token(IDLParserConstants.FIXED);
    String fixedVal = fixedLiteral.image;
    if (fixedVal.EndsWith("d") || fixedVal.EndsWith("D")) {
        fixedVal = fixedVal.Substring(0, fixedVal.Length - 1);
    }
    {if (true) return Decimal.Parse(fixedVal, System.Globalization.CultureInfo.InvariantCulture);}
    throw new Error("Missing return statement in function");
  }

  private bool jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(0, xla); }
  }

  private bool jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(1, xla); }
  }

  private bool jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(2, xla); }
  }

  private bool jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(3, xla); }
  }

  private bool jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(4, xla); }
  }

  private bool jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(5, xla); }
  }

  private bool jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(6, xla); }
  }

  private bool jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(7, xla); }
  }

  private bool jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(8, xla); }
  }

  private bool jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(9, xla); }
  }

  private bool jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(10, xla); }
  }

  private bool jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(11, xla); }
  }

  private bool jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(12, xla); }
  }

  private bool jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(13, xla); }
  }

  private bool jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(14, xla); }
  }

  private bool jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(15, xla); }
  }

  private bool jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(16, xla); }
  }

  private bool jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(17, xla); }
  }

  private bool jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(18, xla); }
  }

  private bool jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(19, xla); }
  }

  private bool jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(20, xla); }
  }

  private bool jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess) { return true; }
    finally { jj_save(21, xla); }
  }

  private bool jj_3R_152() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private bool jj_3R_151() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private bool jj_3R_69() {
    if (jj_scan_token(IDLParserConstants.HEXADECIMALINT)) return true;
    return false;
  }

  private bool jj_3R_32() {
    if (jj_3R_55()) return true;
    if (jj_scan_token(14)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(15)) return true;
    return false;
  }

  private bool jj_3R_150() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private bool jj_3R_68() {
    if (jj_scan_token(IDLParserConstants.DECIMALINT)) return true;
    return false;
  }

  private bool jj_3_6() {
    if (jj_3R_33()) return true;
    return false;
  }

  private bool jj_3R_48() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private bool jj_3_5() {
    if (jj_3R_32()) return true;
    return false;
  }

  private bool jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  private bool jj_3R_67() {
    if (jj_scan_token(IDLParserConstants.OCTALINT)) return true;
    return false;
  }

  private bool jj_3R_49() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private bool jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_58() {
    if (jj_scan_token(IDLParserConstants.ID)) return true;
    return false;
  }

  private bool jj_3R_149() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private bool jj_3R_80() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3R_186() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  private bool jj_3R_54() {
    if (jj_3R_81()) return true;
    return false;
  }

  private bool jj_3R_116() {
    if (jj_3R_149()) return true;
    return false;
  }

  private bool jj_3R_131() {
    if (jj_3R_157()) return true;
    return false;
  }

  private bool jj_3_4() {
    if (jj_3R_31()) return true;
    return false;
  }

  private bool jj_3_22() {
    if (jj_3R_49()) return true;
    return false;
  }

  private bool jj_3R_130() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3R_53() {
    if (jj_3R_80()) return true;
    return false;
  }

  private bool jj_3R_155() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  private bool jj_3R_129() {
    if (jj_3R_155()) return true;
    return false;
  }

  private bool jj_3_21() {
    if (jj_3R_48()) return true;
    return false;
  }

  private bool jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    return false;
  }

  private bool jj_3_3() {
    if (jj_3R_30()) return true;
    return false;
  }

  private bool jj_3R_128() {
    if (jj_3R_154()) return true;
    return false;
  }

  private bool jj_3R_52() {
    if (jj_3R_79()) return true;
    return false;
  }

  private bool jj_3R_127() {
    if (jj_3R_153()) return true;
    return false;
  }

  private bool jj_3R_51() {
    if (jj_3R_78()) return true;
    return false;
  }

  private bool jj_3R_126() {
    if (jj_3R_44()) return true;
    return false;
  }

  private bool jj_3R_88() {
    if (jj_3R_91()) return true;
    return false;
  }

  private bool jj_3R_188() {
    if (jj_scan_token(83)) return true;
    if (jj_scan_token(68)) return true;
    return false;
  }

  private bool jj_3R_50() {
    if (jj_3R_77()) return true;
    return false;
  }

  private bool jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_125() {
    if (jj_3R_152()) return true;
    return false;
  }

  private bool jj_3R_124() {
    if (jj_3R_151()) return true;
    return false;
  }

  private bool jj_3R_46() {
    if (jj_scan_token(52)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private bool jj_3R_123() {
    if (jj_3R_150()) return true;
    return false;
  }

  private bool jj_3_11() {
    if (jj_3R_38()) return true;
    return false;
  }

  private bool jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_195() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3R_47() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private bool jj_3R_194() {
    if (jj_3R_154()) return true;
    return false;
  }

  private bool jj_3R_193() {
    if (jj_3R_153()) return true;
    return false;
  }

  private bool jj_3R_162() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private bool jj_3R_192() {
    if (jj_3R_163()) return true;
    return false;
  }

  private bool jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    }
    return false;
  }

  private bool jj_3_1() {
    if (jj_3R_28()) return true;
    return false;
  }

  private bool jj_3_2() {
    if (jj_3R_29()) return true;
    return false;
  }

  private bool jj_3R_148() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private bool jj_3R_78() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private bool jj_3R_115() {
    if (jj_3R_148()) return true;
    return false;
  }

  private bool jj_3_20() {
    if (jj_3R_47()) return true;
    return false;
  }

  private bool jj_3R_87() {
    if (jj_3R_90()) return true;
    return false;
  }

  private bool jj_3_19() {
    if (jj_3R_46()) return true;
    return false;
  }

  private bool jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_66() {
    if (jj_3R_95()) return true;
    return false;
  }

  private bool jj_3R_65() {
    if (jj_3R_94()) return true;
    return false;
  }

  private bool jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private bool jj_3R_141() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  private bool jj_3R_96() {
    if (jj_scan_token(52)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private bool jj_3R_181() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  private bool jj_3R_161() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  private bool jj_3R_98() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private bool jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    return false;
  }

  private bool jj_3R_62() {
    if (jj_3R_91()) return true;
    return false;
  }

  private bool jj_3R_97() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private bool jj_3R_29() {
    if (jj_scan_token(IDLParserConstants.PRAGMA)) return true;
    if (jj_scan_token(IDLParserConstants.PRAGMAPREFIX)) return true;
    return false;
  }

  private bool jj_3R_112() {
    if (jj_3R_141()) return true;
    return false;
  }

  private bool jj_3R_111() {
    if (jj_3R_140()) return true;
    return false;
  }

  private bool jj_3R_183() {
    if (jj_3R_189()) return true;
    return false;
  }

  private bool jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  private bool jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_110() {
    if (jj_3R_107()) return true;
    return false;
  }

  private bool jj_3R_75() {
    if (jj_3R_98()) return true;
    return false;
  }

  private bool jj_3R_74() {
    if (jj_3R_97()) return true;
    return false;
  }

  private bool jj_3R_73() {
    if (jj_3R_96()) return true;
    return false;
  }

  private bool jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_182() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  private bool jj_3R_139() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3R_160() {
    if (jj_scan_token(IDLParserConstants.PRAGMA)) return true;
    return false;
  }

  private bool jj_3R_45() {
    if (jj_3R_76()) return true;
    return false;
  }

  private bool jj_3R_167() {
    if (jj_3R_182()) return true;
    return false;
  }

  private bool jj_3R_91() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private bool jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    return false;
  }

  private bool jj_3R_122() {
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3R_90() {
    if (jj_scan_token(19)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    return false;
  }

  private bool jj_3R_61() {
    if (jj_3R_90()) return true;
    return false;
  }

  private bool jj_3R_86() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  private bool jj_3R_81() {
    if (jj_scan_token(IDLParserConstants.PRAGMA)) return true;
    if (jj_scan_token(IDLParserConstants.PRAGMAID)) return true;
    return false;
  }

  private bool jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    if (jj_3R_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3_18() {
    if (jj_3R_45()) return true;
    return false;
  }

  private bool jj_3R_60() {
    if (jj_3R_89()) return true;
    return false;
  }

  private bool jj_3R_79() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3R_99() {
    if (jj_3R_117()) return true;
    return false;
  }

  private bool jj_3R_166() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  private bool jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    return false;
  }

  private bool jj_3R_147() {
    if (jj_3R_121()) return true;
    return false;
  }

  private bool jj_3R_146() {
    if (jj_3R_120()) return true;
    return false;
  }

  private bool jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_145() {
    if (jj_3R_119()) return true;
    return false;
  }

  private bool jj_3R_34() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(14)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(15)) return true;
    return false;
  }

  private bool jj_3R_117() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  private bool jj_3R_191() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  private bool jj_3R_180() {
    if (jj_3R_188()) return true;
    return false;
  }

  private bool jj_3R_179() {
    if (jj_3R_154()) return true;
    return false;
  }

  private bool jj_3R_76() {
    if (jj_3R_58()) return true;
    Token xsp;
    if (jj_3R_99()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_178() {
    if (jj_3R_153()) return true;
    return false;
  }

  private bool jj_3R_177() {
    if (jj_3R_187()) return true;
    return false;
  }

  private bool jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    }
    return false;
  }

  private bool jj_3R_190() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  private bool jj_3R_154() {
    if (jj_scan_token(71)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_35() {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(22)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private bool jj_3R_176() {
    if (jj_3R_186()) return true;
    return false;
  }

  private bool jj_3R_175() {
    if (jj_3R_185()) return true;
    return false;
  }

  private bool jj_3R_174() {
    if (jj_3R_184()) return true;
    return false;
  }

  private bool jj_3R_153() {
    if (jj_scan_token(70)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_173() {
    if (jj_3R_157()) return true;
    return false;
  }

  private bool jj_3R_172() {
    if (jj_3R_152()) return true;
    return false;
  }

  private bool jj_3R_171() {
    if (jj_3R_151()) return true;
    return false;
  }

  private bool jj_3R_36() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private bool jj_3R_170() {
    if (jj_3R_150()) return true;
    return false;
  }

  private bool jj_3R_187() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(68)) return true;
    return false;
  }

  private bool jj_3R_169() {
    if (jj_3R_38()) return true;
    return false;
  }

  private bool jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3_17() {
    if (jj_3R_44()) return true;
    return false;
  }

  private bool jj_3R_64() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  private bool jj_3R_144() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  private bool jj_3R_143() {
    if (jj_3R_164()) return true;
    return false;
  }

  private bool jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_142() {
    if (jj_3R_163()) return true;
    return false;
  }

  private bool jj_3R_93() {
    if (jj_3R_114()) return true;
    return false;
  }

  private bool jj_3_10() {
    if (jj_3R_37()) return true;
    return false;
  }

  private bool jj_3R_121() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  private bool jj_3R_92() {
    if (jj_3R_113()) return true;
    return false;
  }

  private bool jj_3_9() {
    if (jj_3R_36()) return true;
    return false;
  }

  private bool jj_3_8() {
    if (jj_3R_35()) return true;
    return false;
  }

  private bool jj_3_7() {
    if (jj_3R_34()) return true;
    return false;
  }

  private bool jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    return false;
  }

  private bool jj_3R_165() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  private bool jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_118() {
    if (jj_3R_63()) return true;
    return false;
  }

  private bool jj_3R_83() {
    if (jj_3R_106()) return true;
    return false;
  }

  private bool jj_3R_132() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3R_104() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private bool jj_3R_103() {
    if (jj_3R_121()) return true;
    return false;
  }

  private bool jj_3R_102() {
    if (jj_3R_120()) return true;
    return false;
  }

  private bool jj_3R_101() {
    if (jj_3R_119()) return true;
    return false;
  }

  private bool jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_100() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private bool jj_3R_106() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private bool jj_3R_138() {
    if (jj_3R_160()) return true;
    return false;
  }

  private bool jj_3R_137() {
    if (jj_3R_159()) return true;
    return false;
  }

  private bool jj_3R_136() {
    if (jj_3R_158()) return true;
    return false;
  }

  private bool jj_3R_135() {
    if (jj_3R_79()) return true;
    return false;
  }

  private bool jj_3R_134() {
    if (jj_3R_78()) return true;
    return false;
  }

  private bool jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_133() {
    if (jj_3R_77()) return true;
    return false;
  }

  private bool jj_3R_42() {
    if (jj_scan_token(IDLParserConstants.FIXED)) return true;
    return false;
  }

  private bool jj_3R_84() {
    if (jj_3R_107()) return true;
    return false;
  }

  private bool jj_3R_72() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  private bool jj_3R_56() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3_16() {
    if (jj_3R_43()) return true;
    return false;
  }

  private bool jj_3R_120() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3_15() {
    if (jj_3R_42()) return true;
    return false;
  }

  private bool jj_3R_71() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private bool jj_3_14() {
    if (jj_3R_41()) return true;
    return false;
  }

  private bool jj_3R_109() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private bool jj_3R_108() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  private bool jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  private bool jj_3_13() {
    if (jj_3R_40()) return true;
    return false;
  }

  private bool jj_3_12() {
    if (jj_3R_39()) return true;
    return false;
  }

  private bool jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private bool jj_3R_82() {
    if (jj_3R_85()) return true;
    return false;
  }

  private bool jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    if (jj_3R_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_119() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3R_41() {
    if (jj_scan_token(IDLParserConstants.WIDECHARACTER)) return true;
    return false;
  }

  private bool jj_3R_185() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private bool jj_3R_57() {
    if (jj_3R_85()) return true;
    return false;
  }

  private bool jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3R_184() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  private bool jj_3R_40() {
    if (jj_scan_token(IDLParserConstants.WIDESTRING)) return true;
    return false;
  }

  private bool jj_3R_157() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  public IDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public bool lookingAhead = false;
  private bool jj_semLA;
  private int jj_gen;
  private int[] jj_la1 = new int[88];
  static private uint[] jj_la1_0;
  static private uint[] jj_la1_1;
  static private uint[] jj_la1_2;
  static private uint[] jj_la1_3;
  static IDLParser() {
      jj_la1_0_init();
      jj_la1_1_init();
      jj_la1_2_init();
      jj_la1_3_init();
   }
   private static void jj_la1_0_init() {
      jj_la1_0 = new uint[] {0x0,0xc72000,0xc72001,0x0,0x2000,0x0,0xc72000,0x60000,0x60000,0x80000,0x60000,0x200000,0x200000,0x100000,0x200000,0x200000,0x20000,0x80000,0x2000000,0x200000,0x1c200000,0x800000,0x80000,0x2000000,0x1000000,0x100000,0x100000,0x1c200000,0xc000000,0x80000000,0x0,0x100000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20200000,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x100000,0x200000,0x0,0x0,0x0,0x200000,0x100000,0x80000000,0x80000000,0x100000,0x100000,0x200000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1_init() {
      jj_la1_1 = new uint[] {0x0,0x60030001,0x60030001,0x60030001,0x0,0x0,0x60030001,0x0,0x0,0x0,0x0,0x7fff0001,0x7fff0001,0x0,0x0,0x0,0x0,0x0,0x0,0x7fff0001,0x7fff0001,0x0,0x0,0x0,0x0,0x0,0x0,0x7fff0001,0x0,0x0,0x0,0x0,0x2,0x79c0000,0x8,0x10,0x20,0xc0,0xc0,0x300,0x300,0x1c00,0x1c00,0x2300,0x2300,0xc002,0x0,0x0,0xc000,0xc000,0x60030000,0x7ffc0000,0x1ffc0000,0x1ff00000,0x0,0x60000000,0x0,0x0,0x1c0000,0x700000,0x200000,0x400000,0x7ffc0000,0x2f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffc0000,0x0,0x0,0x0,0x1ffc0000,0x0,0x0,0x0,0x0,0x0,0x1ffc0000,0x0,0x0,0x2,};
   }
   private static void jj_la1_2_init() {
      jj_la1_2 = new uint[] {0x0,0x401004,0x401004,0x1004,0x0,0x400000,0x401004,0x0,0x0,0x0,0x0,0x2507cc4,0x2507cc4,0x0,0x0,0x0,0x0,0x0,0x0,0x2507cc4,0x2507cc4,0x0,0x0,0x0,0x0,0x0,0x0,0x2507cc4,0x0,0x0,0x20000,0x0,0x2000000,0x20800c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe200000,0x0,0x80000000,0x0,0x0,0x4,0x21800cc,0x21800c8,0x100000,0x800c8,0x4,0x0,0x2000000,0x0,0x0,0x0,0x0,0x21800cc,0x2000004,0x3,0x3,0x3,0x0,0x0,0x10,0x10,0x100,0x400,0x0,0x21800cc,0x2000,0x20000,0x40000,0x21040c0,0x0,0x18000,0x18000,0x0,0x0,0x21000c0,0x1c000000,0x60000000,0x60200000,};
   }
   private static void jj_la1_3_init() {
      jj_la1_3 = new uint[] {0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  private JJCalls[] jj_2_rtns = new JJCalls[22];
  private bool jj_rescan = false;
  private int jj_gc = 0;

  public IDLParser(System.IO.Stream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public IDLParser(System.IO.StreamReader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(System.IO.StreamReader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public IDLParser(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.Length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  private class LookaheadSuccess : Exception { }
  private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private bool jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_calc() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private System.Collections.ArrayList jj_expentries = new System.Collections.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      bool exists = false;
      foreach (int[] oldentry in jj_expentries) {
        if (oldentry.Length == jj_expentry.Length) {
          exists = true;
          for (int i = 0; i < jj_expentry.Length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.Add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.Clear();
    bool[] la1tokens = new bool[101];
    for (int i = 0; i < 101; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 88; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 101; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.Add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.Count][];
    for (int i = 0; i < jj_expentries.Count; i++) {
      exptokseq[i] = (int[])jj_expentries[i];
    }
    return new ParseException(token, exptokseq, IDLParserConstants.tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 22; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  sealed class JJCalls {
    public int gen;
    public Token first;
    public int arg;
    public JJCalls next;
  }

}

}
