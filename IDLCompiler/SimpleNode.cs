/* Generated By:JJTree: Do not edit this line. SimpleNode.cs */

using System;

namespace parser {

public class SimpleNode : Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected IDLParser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(IDLParser p, int i) : this(i) {
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.Length) {
      Node[] c = new Node[i + 1];
      Array.Copy(children, 0, c, 0, children.Length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.Length;
  }

  /** Accept the visitor. **/
  public virtual Object jjtAccept(IDLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public virtual Object childrenAccept(IDLParserVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.Length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public override String ToString() { return IDLParserTreeConstants.jjtNodeName[id]; }
  public String ToString(String prefix) { return prefix + ToString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    Console.WriteLine(ToString(prefix));
    if (children != null) {
      for (int i = 0; i < children.Length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }
  
  /// <summary>
  /// provides a description of the node, which allows the user to find
  /// the idl part from which this node has been created.  
  /// </summary>
  /// <remarks>
  /// This method is needed for construction of error messages.
  /// To prevent endless loops (Stack overflow), do not call GetIdentification
  /// on the parent(s) of this node.
  /// </remarks>
  public virtual string GetIdentification() {
      return "";
  }
  
  /// <summary>
  /// provides a description of the node usable by direct children to
  /// describe the scope they are defined in.
  /// </summary>
  /// <remarks>
  /// This method is needed for construction of error messages.
  /// To prevent endless loops (Stack overflow), do not call error reporting
  /// methods (GetIdentification / GetEmbedderDesc) on children of this node.
  /// </remarks>
  public virtual string GetEmbedderDesc() {
      return "";
  }
}



}

